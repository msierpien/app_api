package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"api/graph/model"
	facturownia "api/libs/fakturownia/invoice"
	"context"
	"encoding/json"
	"errors"
	"fmt"
)

// CreateInvoice is the resolver for the createInvoice field.
func (r *mutationResolver) CreateInvoice(ctx context.Context, input *model.InvoiceInput) (*model.InvoiceResponse, error) {
	if input == nil {
		// Obsługa błędu, input nie powinien być nil
		return nil, errors.New("input cannot be nil")
	}

	invoiceBytes, err := facturownia.InvoiceAdd(*input) // Użycie *input zamiast input
	if err != nil {
		return nil, err
	}

	var invoice *model.InvoiceResponse
	err = json.Unmarshal(invoiceBytes, &invoice)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling invoice data: %v", err)
	}

	return invoice, nil
}

// Invoice is the resolver for the invoice field.
func (r *queryResolver) Invoice(ctx context.Context, id *int) (*model.InvoiceResponse, error) {
	invoiceBytes, err := facturownia.InvoiceID(*id)
	if err != nil {
		return nil, err
	}

	var invoice *model.InvoiceResponse
	err = json.Unmarshal(invoiceBytes, &invoice)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling invoice data: %v", err)
	}

	return invoice, nil
}

// Invoices is the resolver for the invoices field.
func (r *queryResolver) Invoices(ctx context.Context, clientID *string) ([]*model.Invoice, error) {
	invoiceBytes, err := facturownia.InvoiceClient(*clientID)
	if err != nil {
		return nil, err
	}

	var invoices []*model.Invoice
	err = json.Unmarshal(invoiceBytes, &invoices)
	if err != nil {
		return nil, fmt.Errorf("error unmarshalling invoice data: %v", err)
	}

	return invoices, nil
}

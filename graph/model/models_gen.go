// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Image struct {
	URL string `json:"url"`
}

type Invoice struct {
	ID          *float64 `json:"id,omitempty"`
	UserID      *float64 `json:"user_id,omitempty"`
	Number      *string  `json:"number,omitempty"`
	Place       *string  `json:"place,omitempty"`
	SellDate    *string  `json:"sell_date,omitempty"`
	PaymentType *string  `json:"payment_type,omitempty"`
	PriceNet    *string  `json:"price_net,omitempty"`
	PriceGross  *string  `json:"price_gross,omitempty"`
	Currency    *string  `json:"currency,omitempty"`
	Status      *string  `json:"status,omitempty"`
	Description *string  `json:"description,omitempty"`
	SellerName  *string  `json:"seller_name,omitempty"`
	BuyerName   *string  `json:"buyer_name,omitempty"`
	KindText    *string  `json:"kind_text,omitempty"`
	Kind        *string  `json:"kind,omitempty"`
}

type InvoiceInput struct {
	Kind      *KindInvoice             `json:"kind,omitempty"`
	ClientID  *int                     `json:"client_id,omitempty"`
	Number    *string                  `json:"number,omitempty"`
	SellDate  *string                  `json:"sell_date,omitempty"`
	IssueDate *string                  `json:"issue_date,omitempty"`
	PaymentTo *string                  `json:"payment_to,omitempty"`
	Positions []*PositionsInvoiceInput `json:"positions"`
}

type InvoiceResponse struct {
	ID          *float64            `json:"id,omitempty"`
	UserID      *float64            `json:"user_id,omitempty"`
	Number      *string             `json:"number,omitempty"`
	Place       *string             `json:"place,omitempty"`
	SellDate    *string             `json:"sell_date,omitempty"`
	PaymentType *string             `json:"payment_type,omitempty"`
	PriceNet    *string             `json:"price_net,omitempty"`
	PriceGross  *string             `json:"price_gross,omitempty"`
	Currency    *string             `json:"currency,omitempty"`
	Status      *string             `json:"status,omitempty"`
	Description *string             `json:"description,omitempty"`
	SellerName  *string             `json:"seller_name,omitempty"`
	BuyerName   *string             `json:"buyer_name,omitempty"`
	KindText    *string             `json:"kind_text,omitempty"`
	Kind        *string             `json:"kind,omitempty"`
	Positions   []*PositionsInvoice `json:"positions,omitempty"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type PositionsInvoice struct {
	ID                *int    `json:"id,omitempty"`
	InvoiceID         *int    `json:"invoiceId,omitempty"`
	Name              *string `json:"name,omitempty"`
	Description       *string `json:"description,omitempty"`
	PriceNet          *string `json:"priceNet,omitempty"`
	Quantity          *string `json:"quantity,omitempty"`
	TotalPriceGross   *string `json:"totalPriceGross,omitempty"`
	TotalPriceNet     *string `json:"totalPriceNet,omitempty"`
	AccountID         *int    `json:"accountId,omitempty"`
	CreatedAt         *string `json:"createdAt,omitempty"`
	UpdatedAt         *string `json:"updatedAt,omitempty"`
	AdditionalInfo    *string `json:"additionalInfo,omitempty"`
	QuantityUnit      *string `json:"quantityUnit,omitempty"`
	Tax               *string `json:"tax,omitempty"`
	PriceGross        *string `json:"priceGross,omitempty"`
	PriceTax          *string `json:"priceTax,omitempty"`
	TotalPriceTax     *string `json:"totalPriceTax,omitempty"`
	Kind              *string `json:"kind,omitempty"`
	InvoicePositionID *int    `json:"invoicePositionId,omitempty"`
	ProductID         *string `json:"productId,omitempty"`
	Deleted           *bool   `json:"deleted,omitempty"`
	Discount          *string `json:"discount,omitempty"`
	DiscountPercent   *string `json:"discountPercent,omitempty"`
	Tax2              *string `json:"tax2,omitempty"`
	ExchangeRate      *string `json:"exchangeRate,omitempty"`
	AccountingTaxKind *string `json:"accountingTaxKind,omitempty"`
	Code              *string `json:"code,omitempty"`
	DiscountNet       *string `json:"discountNet,omitempty"`
	LumpSumTax        *string `json:"lumpSumTax,omitempty"`
	CorrectedPosKind  *string `json:"correctedPosKind,omitempty"`
	GtuCode           *string `json:"gtuCode,omitempty"`
}

type PositionsInvoiceInput struct {
	ProductID        *int     `json:"product_id,omitempty"`
	ID               *int     `json:"id,omitempty"`
	Name             *string  `json:"name,omitempty"`
	AdditionalInfo   *string  `json:"additional_info,omitempty"`
	Quantity         float64  `json:"quantity"`
	QuantityUnit     *string  `json:"quantityUnit,omitempty"`
	PriceNet         *float64 `json:"price_net,omitempty"`
	PriceGross       *float64 `json:"price_gross,omitempty"`
	Tax              *string  `json:"tax,omitempty"`
	TotalPriceGross  *float64 `json:"total_price_gross,omitempty"`
	Code             *string  `json:"code,omitempty"`
	DiscountNet      *string  `json:"discountNet,omitempty"`
	LumpSumTax       *string  `json:"lumpSumTax,omitempty"`
	CorrectedPosKind *string  `json:"correctedPosKind,omitempty"`
	GtuCode          *string  `json:"gtuCode,omitempty"`
}

type Product struct {
	ID          string   `json:"id"`
	Name        *string  `json:"name,omitempty"`
	Slug        string   `json:"slug"`
	Description string   `json:"description"`
	Price       int      `json:"price"`
	Images      []*Image `json:"images"`
	CreatedAt   string   `json:"createdAt"`
	UpdatedAt   string   `json:"updatedAt"`
}

type Todo struct {
	ID   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type KindInvoice string

const (
	KindInvoiceVat      KindInvoice = "vat"
	KindInvoiceProforma KindInvoice = "proforma"
	KindInvoiceFinal    KindInvoice = "final"
)

var AllKindInvoice = []KindInvoice{
	KindInvoiceVat,
	KindInvoiceProforma,
	KindInvoiceFinal,
}

func (e KindInvoice) IsValid() bool {
	switch e {
	case KindInvoiceVat, KindInvoiceProforma, KindInvoiceFinal:
		return true
	}
	return false
}

func (e KindInvoice) String() string {
	return string(e)
}

func (e *KindInvoice) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = KindInvoice(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid KindInvoice", str)
	}
	return nil
}

func (e KindInvoice) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
